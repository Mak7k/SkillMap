ctrl + shift + P




А теперь имея представление что у меня где используется, напиши полностью главу "2.3	Выбор инструментов и методов реализации веб-приложения". У меня есть пример, как это было сделано в курсовой. Постарайся грамотно рассказать какие инструменты мне необходимы и тп. Все в будущем времени, тк в этой главе у меня предполагается что нет проекта готового. Поэтому все в будущем времени (или постарайся не употреблять никакое время или постарайся это как-то решить)
Вот пример мой с курсовой (не делай структуру точь в точь, это просто пример который ты модешь проанализировать):
Для создания любого проекта любого размера и содержания необходимо выбрать инструменты для его разработки.
Средства разработки программного обеспечения – совокупность приемов, методов, а также набор инструментальных программ (компиляторы, прикладные/системные библиотеки и т.д.), используемых для создания программного кода программы.
Среды разработки включают в себя:
	средства автоматизации сборки,
	текстовый редактор,
	компилятор и/или интерпретатор,
	отладчик.
В качестве интегрированной среды разработки, для данного веб-приложения, используется Microsoft Visual Studio Code.
Visual Studio Code – редактор исходного кода, разработанный Microsoft. Позиционируется как редактор кода для кроссплатформенной разработки веб-приложений. Включает в себя отладчик, подсветку синтаксиса и множество других полезных функций. Имеет широкие возможности для настройки: пользовательские темы, сочетания клавиш и файлы конфигурации. Распространяется бесплатно, разрабатывается как программное обеспечение с открытым исходным кодом [7].
Причины выбора Microsoft Visual Studio Code в качестве среды разработки:
	поддержка множества языков при разработке,
	интуитивный стиль кодирования, 
	высокая скорость разработки, благодаря множеству возможностей для настройки,
	возможность отладки.
Одним из первых шагов в разработке любого веб-приложения является выбор языка программирования для серверной и клиентской части.
В техническом плане для большинства проектов нет каких-либо ограничений при выборе языка, то есть практически любой функционал сайта или приложения может быть успешно реализован на любом из них, поэтому выбор языка не накладывает никаких ограничений на проект.
Было принято решение об использовании PHP в качестве серверного языка программирования, главным преимуществом которого является предоставление веб-разработчикам возможности быстрого создания динамически генерируемых веб-страниц.
PHP – это язык программирования, специально разработанный для написания веб-приложений, исполняющихся на веб-сервере, используется в качестве инструмента для создания динамических и интерактивных веб-страниц. Этот язык оказался достаточно гибким и мощным, поэтому приобрёл большую популярность и используется в проектах любого масштаба: от простого блога до крупнейших веб-приложений в Интернете [3].
Причины выбора PHP в качестве серверного языка программирования:
	является свободным программным обеспечением,
	имеет развитую поддержку баз данных,
	имеется огромное количество библиотек и расширений языка,
	предлагает средства организации веб-сессий, программный интерфейс расширений,
	может быть развёрнут почти на любом сервере.
Было выполнено описание используемых в данном веб-приложении языков программирования клиентской части. Рассмотрены особенности каждого из них. 
HTML – это стандартный язык разметки гипертекста в Интернете. Его основное предназначение – создавать интернет-страницы и обеспечивать расположение в документе списков, заголовков, таблиц, изображений и прочих материалов. Текстовые документы, содержащие разметку на языке HTML, обрабатываются браузерами, которые отображают документ в его форматированном виде [1, 8].
CSS – формальный язык описания внешнего вида документа, написанного с использованием языка разметки. Преимущественно используется как средство описания, оформления внешнего вида веб-страниц, написанных с помощью языка разметки HTML [9].
CSS используется создателями веб-страниц для задания цветов, шрифтов, стилей, расположения отдельных блоков и других аспектов представления внешнего вида этих веб-страниц.
JavaScript – это кроссплатформенный, объектно-ориентированный скриптовый язык, который добавляет интерактивность веб-страницам. Программы, написанные на языке JavaScript, называются скриптами. В браузере они подключаются непосредственно к HTML-документу и, как только загружается страница, тут же выполняются [2, 10].
Скрипт представляет собой программный код, набор инструкций, который не требует предварительной обработки перед запуском. Код JavaScript интерпретируется базовым программным обеспечением браузера во время загрузки веб-страницы. Интерпретатор браузера выполняет построчный анализ, обработку и выполнение исходной программы или запроса [2].
Если PHP-скрипт обрабатывается на стороне сервера с помощью PHP-интерпретатора, то JavaScript выполняется в браузере пользователя JavaScript-интерпретатором. В браузере JavaScript может делать всё, что относится к манипуляции с HTML-документом, взаимодействию с посетителем и, с некоторыми ограничениями, с сервером.
Возможности JavaScript:
	проверять правильность заполнения пользовательских HTML-форм,
	менять стили HTML-элементов, скрывать, показывать элементы,
	отображать всплывающие и диалоговые окна,
	реагировать на действия посетителя, обрабатывать нажатия мыши, перемещения курсора и т.п.
jQuery – набор функций JavaScript, фокусирующийся на взаимодействии JavaScript и HTML. Библиотека jQuery помогает легко получать доступ к любому элементу веб-страницы, обращаться к атрибутам и содержимому этого элемента, манипулировать им [10].
Используя jQuery, можно заметить ряд преимуществ перед обычным JS, а именно:
	простая работа с событиями,
	кроссбраузерность,
	удобная работа с AJAX (асинхронные запросы к серверу),
	удобные методы для работы с эффектами (скрытие / появление элементов, добавление визуальных эффектов).
Помимо основного назначения, библиотека jQuery предоставляет набор функций для работы с AJAX.
AJAX – подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данных браузера с веб-сервером. В результате, при обновлении данных веб-страница не перезагружается полностью, благодаря этому веб-приложения становятся быстрее и удобнее [10].
Алгоритм работы AJAX:
	пользователь заходит на веб-страницу и нажимает на определённый элемент,
	скрипт, написанный на языке JavaScript определяет, какая информация необходима для обновления страницы,
	браузер отправляет соответствующий запрос на сервер,
	сервер возвращает только ту часть информации, из которой пришёл запрос,
	скрипт вносит изменения с учётом полученной информации (без полной перезагрузки страницы).
